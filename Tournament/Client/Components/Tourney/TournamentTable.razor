@using Tournament.Domain.Tournaments
@using Tournament.Shared.Tournaments

@if (GetMatchTypes()?.Count() > 0)
{
    <MudSimpleTable Dense="true" Striped="true" Bordered="true">
        <thead>
            <tr>
                <th>Group</th>
                @foreach (var type in GetMatchTypes())
                {
                    <th>@type.ToString()</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var type in GetGroupTypes())
            {
                <tr>
                    <td>@type.ToString()</td>
                    @foreach (var match in Groups.Where(x => x.Type == type).OrderBy(x => x.MatchType)) {
                        <td>@match.MatchType.ToString()</td>
                    }
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}

@code {
    [Parameter] public IEnumerable<TournamentGroupModel> Groups { get; set; }
    private IEnumerable<Tournament.Domain.Games.MatchType>? GetMatchTypes() {
        return Groups?.OrderBy(x => x.MatchType).GroupBy(x => new {x.MatchType}).Select(x => x.Key.MatchType);
    }

    private IEnumerable<TournamentGroupTypes>? GetGroupTypes()
    {
        return Groups?.OrderBy(x => x.Type).GroupBy(x => new { x.Type }).Select(x => x.Key.Type);
    }
}