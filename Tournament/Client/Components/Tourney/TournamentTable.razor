@using Tournament.Domain.Tournaments
@using Tournament.Shared.Players
@using Tournament.Shared.Tournaments

@if (GetMatchTypes()?.Count() > 0)
{
    <MudSimpleTable Dense="true" Striped="true" Bordered="true">
        <thead>
            <tr>
                <th>Group</th>
                @foreach (var type in GetMatchTypes())
                {
                    <th>@type.ToString()</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var type in GetGroupTypes())
            {
                <tr>
                    <td>@type.ToString()</td>
                    @foreach (var match in Groups.Where(x => x.Type == type).OrderBy(x => x.MatchType))
                    {
                        @if (TournamentId is null) {
                            <td>@GetPlayerCount(match.MatchType, match.Type)</td>
                        }
                        else {
                            var url = @GetGroupIdUrl(match.MatchType, match.Type);
                            <td><MudLink Href="@url">@GetPlayerCount(match.MatchType, match.Type)</MudLink></td>
                        }
                    }
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}

@code {
    [Parameter] public IEnumerable<TournamentGroupModel> Groups { get; set; }
    [Parameter] public IEnumerable<RegisteredPlayersModel>? RegisteredPlayers { get; set; }

    [Parameter] public Guid? TournamentId { get; set; } 

    private IEnumerable<Tournament.Domain.Games.MatchType>? GetMatchTypes()
    {
        return Groups?.OrderBy(x => x.MatchType).GroupBy(x => new { x.MatchType }).Select(x => x.Key.MatchType);
    }

    private IEnumerable<TournamentGroupTypes>? GetGroupTypes()
    {
        return Groups?.OrderBy(x => x.Type).GroupBy(x => new { x.Type }).Select(x => x.Key.Type);
    }

    public string GetPlayerCount(MatchType matchType, TournamentGroupTypes groupType)
    {
        if (RegisteredPlayers is null)
        {
            return matchType.ToString();
        }
        return RegisteredPlayers.Where(x => x.TournamentGroup.MatchType == matchType && x.TournamentGroup.Type == groupType).Count().ToString();
    }

    public string GetGroupIdUrl(MatchType matchType, TournamentGroupTypes groupType) 
    {
        return $"tournament/{TournamentId}/group/{Groups.First(x => x.Type == groupType && x.MatchType == matchType).Id.Value}";
    }

}