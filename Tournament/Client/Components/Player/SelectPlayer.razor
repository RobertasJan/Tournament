@using Tournament.Domain.Players
@using Tournament.Shared.Players

<MudAutocomplete T="PlayerModel" Label="Player" ValueChanged="OnPlayerChanged" SearchFunc="@SearchPlayer" ToStringFunc="@(e => e== null ? null : $"{e.FullName}")">
    <ItemTemplate Context="e">
        <MudText>@e.FullName</MudText>
    </ItemTemplate>
    <ItemSelectedTemplate Context="e">
        <MudText>@e.FullName</MudText>
    </ItemSelectedTemplate>
</MudAutocomplete>

@code {
    [Parameter]
    public PlayerModel Player { get; set; }

    [Parameter]
    public Guid? TournamentId { get; set; }

    [Parameter]
    public EventCallback<PlayerModel> PlayerChanged { get; set; }

    [Inject] PlayerService PlayerService { get; set; }

    private async Task<IEnumerable<PlayerModel>> SearchPlayer(string value)
    {
        var response = await PlayerService.GetPlayers(searchText: value);
        return response;
    }

    private Task OnPlayerChanged(PlayerModel player)
    {
        Player = player;
        PlayerChanged.InvokeAsync(player);
        return Task.CompletedTask;
    }
}