@page "/tournament/{Id:guid}"
@using Tournament.Domain.Players;
@using Tournament.Shared.Players
@using Tournament.Shared.Tournaments

<PageTitle>Tournament</PageTitle>
@if (model != null)
{
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudPaper Class="justify-center">
                <TournamentTable Groups="model.Data.Groups" RegisteredPlayers="model.Players" TournamentId="Id"></TournamentTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                <MudTabPanel Text="@Loc["Label_Description"]">
                    <MudText Typo="Typo.h4" GutterBottom="true">@model.Data.Name</MudText>
                    <MudText Typo="Typo.caption" GutterBottom="true">@model.Data.Description</MudText>
                    <MudText Typo="Typo.body2" GutterBottom="true">@model.Data.LongDescription</MudText>
                </MudTabPanel>
                <MudTabPanel Text="@Loc["Label_Players"]">
                    <MudDataGrid T="TournamentPlayerModel" Items="model.TournamentPlayers" Filterable="true">
                        <Columns>
                            <Column T="TournamentPlayerModel" Field="PlayerName" Title="@Loc["Label_Player"]"/>
                            <Column T="TournamentPlayerModel" Field="PartnerDoublesName" Title="@Loc["Label_DoublesPartner"]" />
                            <Column T="TournamentPlayerModel" Field="PartnerMixedName" Title="@Loc["Label_MixedPartner"]" />
                        </Columns>
                    </MudDataGrid>
                </MudTabPanel>
                @if (model.Data.State == Domain.Tournaments.TournamentState.Ongoing)
                {
                    <MudTabPanel Text="@Loc["Label_UpcomingMatches"]">
                        @foreach (var match in model.UpcomingMatches)
                        {
                            <MudGrid>
                                <MudItem Class="upcoming-match" xs="12">
                                    @{
                                        var url = $"tournament/{Id}/match/{match.Id}";
                                        var url2 = $"tournament/{Id}/match/{match.Id}/result";
                                        var url3 = $"tournament/{Id}/match/{match.Id}/live";
                                    }
                                    <MudLink Href="@url"><MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Calculate" Size="Size.Small" Color="Color.Primary">@Loc["Label_Scorer"]</MudButton></MudLink>
                                    @if (IsMaster) 
                                    {
                                        <MudLink Href="@url2"><MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Secondary">@Loc["Label_SetScore"]</MudButton></MudLink>
                                    }
                                    <span class="bold-14">@match.Team1.Player1Name @match.Team1.Player2Name vs. @match.Team2.Player1Name @match.Team2.Player2Name</span>

                                    <MudLink Href="@url3" Style="float: right;"><MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.RemoveRedEye" Size="Size.Small" Color="Color.Info">@Loc["Label_WatchLive"]</MudButton></MudLink>
                                </MudItem>
                            </MudGrid>
                        }
                    </MudTabPanel>
                }
            </MudTabs>
        </MudItem>
        @if (model.Data.State == Domain.Tournaments.TournamentState.Registration)
        {
            <MudItem xs="12">
                @{
                    var href = $"tournament/{Id}/register";
                }
                <MudLink Href="@href">
                    <MudButton Variant="Variant.Filled"
                            Color="Color.Primary">
                        @(IsMaster ? Loc["Label_Register"].Value.ToUpper() : Loc["Label_RegisterYourself"].Value.ToUpper())
                    </MudButton>
                </MudLink>
            </MudItem>
        }
        @if ((model.Data.State == Domain.Tournaments.TournamentState.Registration || model.Data.State == Domain.Tournaments.TournamentState.Created) && IsMaster)
        {
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled"
                    Color="Color.Primary" OnClick="ConfirmDraft">
                    @Loc["Label_StartDraws"].Value.ToUpper()
                </MudButton>
            </MudItem>
        }
        else if (model.Data.State == Domain.Tournaments.TournamentState.Draws && IsMaster) 
        {
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled"
                    Color="Color.Primary" OnClick="StartTournament">
                    @Loc["Label_StartTournament"].Value.ToUpper()
                </MudButton>
            </MudItem>
        }
        else if (model.Data.State == Domain.Tournaments.TournamentState.Ongoing && IsMaster)
        {
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled"
                   Color="Color.Primary" OnClick="EndTournament">
                    @Loc["Label_EndTournament"].Value.ToUpper()
                </MudButton>
            </MudItem>
        }
    </MudGrid>
}
@code {
    [Parameter]
    public Guid Id { get; set; }

    public bool IsMaster { get; set; }

    [Inject] TournamentService TournamentService { get; set; }
    [Inject] UserService UserService { get; set; }
    [Inject] PlayerService PlayerService { get; set; }

    TournamentViewModel model;

    protected override async Task OnInitializedAsync()
    {
        var tournament = await TournamentService.GetTournamentById(Id);
        var isAdmin = await UserService.IsAdmin();
        var isCreator = tournament.TournamentCreatorId == (await PlayerService.GetCurrent())?.Id;
        IsMaster = isAdmin || isCreator;
        model = new TournamentViewModel(TournamentService, tournament);
        model.Players = await TournamentService.GetRegisteredPlayers(Id);
        model.TournamentPlayers = await TournamentService.GetAggregatedRegisteredPlayers(Id);
        model.UpcomingMatches = await TournamentService.GetUpcomingMatches(Id);
    }

    async Task ConfirmDraft() {
        await TournamentService.SetState(model.Data.Id.Value, Domain.Tournaments.TournamentState.Draws);
        model.Data.State = Domain.Tournaments.TournamentState.Draws;
    }
    async Task StartTournament() {
        await TournamentService.SetState(model.Data.Id.Value, Domain.Tournaments.TournamentState.Ongoing);
        model.Data.State = Domain.Tournaments.TournamentState.Ongoing;
    }

    async Task EndTournament() {
        await TournamentService.SetState(model.Data.Id.Value, Domain.Tournaments.TournamentState.Finished);
        model.Data.State = Domain.Tournaments.TournamentState.Finished;
    }
}