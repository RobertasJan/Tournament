@page "/tournament/{Id:guid}/group/{TournamentGroupId:guid}"

@if (model != null && model.TournamentRounds != null)
{
    @if (model.CountOfRounds == 6)
    {
        <link href="css/tourney/64grid.css" rel="stylesheet" />
    }
    else if (model.CountOfRounds == 5)
    {
        <link href="css/tourney/32grid.css" rel="stylesheet" />
    }
    else if (model.CountOfRounds == 4)
    {
        <link href="css/tourney/16grid.css" rel="stylesheet" />
    }
    else if (model.CountOfRounds == 3) 
    {
        <link href="css/tourney/8grid.css" rel="stylesheet" />
    }
    else 
    {
        <link href="css/tourney/4grid.css" rel="stylesheet" />
    }
    <div class="tournament-container">
        <div class="tournament-headers">
            @for (var i = 0; i < model.CountOfRounds; i++) 
            {
                <h3>Round of @(model.CountOfRounds - i)</h3>
            }
        </div>
        @{
            var countOfPositions = (int)Math.Pow(2, model.CountOfRounds);
            var matchesCount = countOfPositions / 2;
        }


        @for (var i = 0; i < matchesCount; i++)
        {
            <div class="tournament-brackets">
                @for (var j = 0; j < model.CountOfRounds; j++)
                {
                    var matches = model.GroupAsList().Where(x => x.Round == j && x.GroupName == i);
                    <ul class="bracket bracket-@(j+1)">
                        @foreach (var match in matches.OrderBy(x => x.GroupPosition))
                        {
                            <li class="team-item">
                                <MudGrid>
                                    <MudItem xs="5">
                                        @if (j == 0)
                                        {
                                            <span>@($"S{@match.Team1?.Seed}")</span>
                                        }
                                        @match.Team1?.Player1Name
                                        </MudItem>
                                    <MudItem xs="2">@*<time>@DisplayTime(match.MatchDate)</time>*@ @match.Record</MudItem>
                                    <MudItem xs="5">
                                        @if (j == 0)
                                        {
                                            <span>@($"S{@match.Team2?.Seed}")</span>
                                        }
                                        @match.Team2?.Player1Name @(matches.Count() == 1 ? $"BF({i * 2 + 1}-{i * 2 + 2})" : "")
                                    </MudItem>
                                    </MudGrid>
                            </li>
                        }
                    </ul>
                }
            </div>
        }

      @*  @for (var i = 0; i < matchesCount; i++)
        {
            <div class="tournament-brackets">
                @for (var j = model.TournamentRounds.Count - 1; j >= 0; j--)
                {
                   @* var indexFrom = (((i + 1) * 2) - 1) - 1;
                    var round = model.TournamentRounds[j];
                    var indexTo = ((int) (Math.Pow(2, round.Round + 1)) + (i * 2)) / 2; // ((i + 1) * 2) + ((round.Round + 1) * 2);
                  @*  <Bracket Round="round.Round" Matches="round.Matches" IndexFrom="indexFrom" IndexTo="indexTo"></Bracket>
                }
            </div>
        }*@
     @*       @for (var indexFrom = ((i + 1) * 2) - 1); indexFrom < matchesCount; i = i)
            {
                <div class="tournament-brackets">
                    @for (var j = model.TournamentRounds.Count - 1; j >= 0; j--)
                    {
                        var round = model.TournamentRounds[j];
                        //normlizing + 1 and matches count is / 2 of positions 
                        var indexTo = ((i + 1) * 2) + (round.Round * 2);//(int)Math.Pow(2, round.Round); //(round.Round + 1)) - 1;
                        <Bracket Round="round.Round" Matches="round.Matches" IndexFrom="indexFrom-1" IndexTo="indexTo"></Bracket>
                    }
                </div>
            }
        }
        
        @for (var i = 0; i < matchesCount; i += 2)
        {

            @for (var indexFrom = ((i + 1) * 2) - 1); indexFrom < matchesCount; i = i)
            {
                <div class="tournament-brackets">
                    @for (var j = model.TournamentRounds.Count - 1; j >= 0; j--)
                    {
                        var round = model.TournamentRounds[j];
                         normlizing + 1 and matches count is / 2 of positions 
                        var indexTo = ((i + 1) * 2) + (round.Round * 2);//(int)Math.Pow(2, round.Round); //(round.Round + 1)) - 1;
                        <Bracket Round="round.Round" Matches="round.Matches" IndexFrom="indexFrom-1" IndexTo="indexTo"></Bracket>
                    }
                </div>
            }
        }

        @for (var i = model.TournamentRounds.Count - 1; i >= 0; i--)
        {
            for (var j = 0; j < countOfTrees; j++)
            {
                var round = model.TournamentRounds[i];
                <div class="tournament-brackets">
                    <Bracket Round="round.Round" Matches="round.Matches"></Bracket>
                </div>
            }
        }*@
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public Guid TournamentGroupId { get; set; }

    [Inject] TournamentService TournamentService { get; set; }
    [Inject] TournamentGroupService TournamentGroupService { get; set; }
    [Inject] GameService GameService { get; set; }

    TournamentGroupViewModel model;

    protected override async Task OnInitializedAsync()
    {
        model = new TournamentGroupViewModel(TournamentService, TournamentGroupService, GameService, Id, TournamentGroupId);
        await model.Load();
    }

    public string DisplayTime(DateTime? date)
    {
        if (date is null)
        {
            return "BYE";
        }
        return date.Value.ToString("HH:mm");
    }

    //private int ZiminFunction(int n)
    //{
    //    if (n == 1)
    //    {
    //        return 1;        
    //    }
    //    (n - 1) * ZiminFunction 
    //}
}