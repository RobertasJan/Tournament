@page "/tournament/{Id:guid}/group/{TournamentGroupId:guid}"

@if (model != null && model.TournamentRounds != null)
{
    @if (model.CountOfRounds == 6)
    {
        <link href="css/tourney/64grid.css" rel="stylesheet" />
    }
    else if (model.CountOfRounds == 5)
    {
        <link href="css/tourney/32grid.css" rel="stylesheet" />
    }
    else if (model.CountOfRounds == 4)
    {
        <link href="css/tourney/16grid.css" rel="stylesheet" />
    }
    else if (model.CountOfRounds == 3) 
    {
        <link href="css/tourney/8grid.css" rel="stylesheet" />
    }
    else 
    {
        <link href="css/tourney/4grid.css" rel="stylesheet" />
    }
    <div class="tournament-container">
        <div class="tournament-headers">
            @for (var i = 0; i < model.CountOfRounds; i++) 
            {
                <h3>Round of @(model.CountOfRounds - i)</h3>
            }
        </div>
        @{
            var countOfPositions = (int)Math.Pow(2, model.CountOfRounds);
            var matchesCount = countOfPositions / 2;
        }


        @for (var i = 0; i < matchesCount; i++)
        {
            <div class="tournament-brackets">
                @for (var j = 0; j < model.CountOfRounds; j++)
                {
                    var matches = model.GroupAsList().Where(x => x.Round == j && x.GroupName == i);
                    <ul class="bracket bracket-@(j+1)">
                        @foreach (var match in matches.OrderBy(x => x.GroupPosition))
                        {
                            <li class="team-item">
                                <MudGrid Class="table-game-score-div">
                                    <MudItem xs="5">
                                        @if (j == 0)
                                        {
                                            <span>@($"S{@match.Team1?.Seed}")</span>
                                        }
                                        @if (match.Result == Domain.Games.MatchResult.Team1Victory) {
                                            <span class="table-victor">
                                                @match.Team1?.Player1Name @match.Team1?.Player2Name
                                            </span>
                                        }
                                        else
                                        {
                                            @match.Team1?.Player1Name @match.Team1?.Player2Name
                                        }
                                        </MudItem>
                                    <MudItem xs="2">@*<time>@DisplayTime(match.MatchDate)</time>*@ @match.Record 
                                    </MudItem>
                                    <MudItem xs="5">
                                        @if (j == 0)
                                        {
                                            <span>@($"S{@match.Team2?.Seed}")</span>
                                        }
                                        @if (match.Result == Domain.Games.MatchResult.Team2Victory) 
                                        {
                                            <span class="table-victor">
                                            @match.Team2?.Player1Name @match.Team2?.Player2Name
                                            </span>
                                        }
                                        else 
                                        {
                                            @match.Team2?.Player1Name @match.Team2?.Player2Name
                                        }
                                        @(matches.Count() == 1 ? $"BF({i * 2 + 1}-{i * 2 + 2})" : "")
                                    </MudItem xs="12">
                                        @if (match.Record == Domain.Games.MatchRecord.Played)
                                        {
                                            <MudItem Class="table-game-score" xs="12">
                                            @foreach (var game in match.Games)
                                            {
                                                <span class="pl-3">@game.Team1Score:@game.Team2Score &nbsp;</span>
                                            }
                                            </MudItem>
                                        }
                                    </MudGrid>
                            </li>
                        }
                    </ul>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public Guid TournamentGroupId { get; set; }

    [Inject] TournamentService TournamentService { get; set; }
    [Inject] TournamentGroupService TournamentGroupService { get; set; }
    [Inject] GameService GameService { get; set; }

    TournamentGroupViewModel model;

    protected override async Task OnInitializedAsync()
    {
        model = new TournamentGroupViewModel(TournamentService, TournamentGroupService, GameService, Id, TournamentGroupId);
        await model.Load();
    }

    public string DisplayTime(DateTime? date)
    {
        if (date is null)
        {
            return "BYE";
        }
        return date.Value.ToString("HH:mm");
    }

    //private int ZiminFunction(int n)
    //{
    //    if (n == 1)
    //    {
    //        return 1;        
    //    }
    //    (n - 1) * ZiminFunction 
    //}
}