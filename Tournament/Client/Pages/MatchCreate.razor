@page "/match/create"

@using MatchType = Tournament.Domain.Games.MatchType;
@using System.ComponentModel.DataAnnotations
@using Tournament.Client.Components;
@using Tournament.Domain.Games
@using Tournament.Shared.Games

<PageTitle>@Loc["Header_CreateMatch"]</PageTitle>
<MudForm @ref="@form" @bind-IsValid="@success">
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-2" Elevation="3">
                <MudText Typo="Typo.subtitle2">@Loc["Label_MatchRules"]</MudText>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect @bind-Value="model.Type" Label="@Loc["Label_MatchType"]" Variant="Variant.Outlined">
                            @foreach (MatchType type in Enum.GetValues(typeof(MatchType)))
                            {
                                <MudSelectItem Value="@type">@Loc[$"Enum_MatchType_{type}"]</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect @bind-Value="model.PointsToWin" Label="@Loc["Label_PointsToWin"]" Variant="Variant.Outlined">
                            <MudSelectItem Value="11">11 (deuce 15)</MudSelectItem>
                            <MudSelectItem Value="15">15 (deuce 17)</MudSelectItem>
                            <MudSelectItem Value="21">21 (deuce 30)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect @bind-Value="model.GamesToWin" Label="@Loc["Label_GamesToWin"]" Variant="Variant.Outlined">
                            <MudSelectItem Value="1">@Loc["Label_BestOf1"]</MudSelectItem>
                            <MudSelectItem Value="2">@Loc["Label_BestOf3"]</MudSelectItem>
                            <MudSelectItem Value="3">@Loc["Label_BestOf5"]</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <MudGrid Class="pt-4">
        <MudItem xs="12" sm="6">
            <MudPaper Class="pa-2" Elevation="3">
                <MudText Typo="Typo.subtitle2">@Loc["Label_Team1"]</MudText>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="model.Player1Name" Label="@Loc["Placeholder_EnterPlayerName"]" Variant="Variant.Text"></MudTextField>
                    </MudItem>
                    @if (model.Type != MatchType.MensSingles && model.Type != MatchType.WomensSingles)
                    {
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="model.Player2Name" Label="@Loc["Placeholder_EnterPlayerName"]" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Class="pa-2" Elevation="3">
                <MudText Typo="Typo.subtitle2">@Loc["Label_Team2"]</MudText>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="model.Player3Name" Label="@Loc["Placeholder_EnterPlayerName"]" Variant="Variant.Text"></MudTextField>
                    </MudItem>
                    @if (model.Type != MatchType.MensSingles && model.Type != MatchType.WomensSingles)
                    {
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="model.Player4Name" Label="@Loc["Placeholder_EnterPlayerName"]" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudButton Class="ma-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await Submit())" FullWidth="true">@Loc["Header_CreateMatch"]</MudButton>
    </MudGrid>
</MudForm>

@code {
    [Inject] GameService GameService { get; set; }

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; }

    bool success = false;
    MudForm? form = new MudForm();
    CreateMatchViewModel model = new CreateMatchViewModel()
        {
            Type = MatchType.MensSingles,
            PointsToWin = 21,
            GamesToWin = 2
        };

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            var response = await GameService.CreateMatch(new Server.Models.MatchModel()
            {
                GamesToWin = model.GamesToWin,
                PointsToFinalize = Deuces.DeucesList[model.PointsToWin],
                PointsToWin = model.PointsToWin,
                Record = MatchRecord.ToBePlayed,
                Result = MatchResult.Undetermined,
                Type = model.Type,
                Player1Name = model.Player1Name,
                Player2Name = model.Player2Name,
                Player3Name = model.Player3Name,
                Player4Name = model.Player4Name
            });
            if (response.Error != null)
            {
                ErrorComponent.ShowError(response.Error?.ErrorMessage);
            }
            else
            {
                NavigationManager.NavigateTo($"/match/{response.Data}", false);
            }
        }
    }
}