@page "/match/{Id:guid}/live"
@page "/tournament/{TourneyId:guid}/match/{Id:guid}/live"
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json;
@using Tournament.Server.Models;
@using Tournament.Shared.Games;
@layout EmptyLayout

@if (currentMatch != null)
{
    <style>
        body {
            height: 100%;
            width: 100%;
            background-color: #111;
            color: #ddd;
            font-size: 10vw;
            text-align: center;
        }

        .match-score {
            display: inline-block;
            margin: 10px;
            padding: 20px;
        }

        .previous-score {
            color: red;
            font-size: 7vw;
        }
    </style>
    @if (currentMatch.Games != null && currentMatch.Games.Count > 0)
    {
        <div class="previous-score">

            <MudGrid>
                @{
                    var last = currentMatch.Games.Last();
                }
                @foreach (var game in currentMatch.Games)
                {
                    if (!last.Equals(game)) {
                    <MudItem xs="3">@game.Team1Score : @game.Team2Score</MudItem>
                    }
                }
            </MudGrid>
        </div>
    }
    <div class="match-score">
        @if (currentMatch.Type != MatchType.MensSingles && currentMatch.Type != MatchType.WomensSingles)
        {
            <MudGrid>
                <MudItem xs="10">@currentMatch.Team1.Player1Name</MudItem>
                <MudItem xs="2"></MudItem>
                <MudItem xs="10">@currentMatch.Team1.Player2Name</MudItem>
                <MudItem xs="2">@DisplayTeam1Score()</MudItem>
                <MudItem xs="10">@currentMatch.Team2.Player1Name</MudItem>
                <MudItem xs="2"></MudItem>
                <MudItem xs="10">@currentMatch.Team2.Player2Name</MudItem>
                <MudItem xs="2">@DisplayTeam2Score()</MudItem>
            </MudGrid>

        }
        else
        {
            <MudGrid>
                <MudItem xs="10">@currentMatch.Team1.Player1Name</MudItem>
                <MudItem xs="2">@DisplayTeam1Score()</MudItem>
                <MudItem xs="10">@currentMatch.Team2.Player1Name</MudItem>
                <MudItem xs="2">@DisplayTeam2Score()</MudItem>
            </MudGrid>
        }
    </div>
}
else
{
    <p>No current match available.</p>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public Guid? TourneyId { get; set; }

    [Inject] GameService GameService { get; set; }
    MatchModel currentMatch;

    HubConnection connection;


    protected override async Task OnInitializedAsync()
    {
        currentMatch = await GameService.GetMatchById(Id);
        currentMatch.Games = await GameService.GetMatchGames(Id);
        connection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/match-score-hub")).Build();

        
        connection.On<List<GameModel>>("UpdateMatchScore", this.ReceiveMessage);
        await connection.StartAsync();

    }
    Task ReceiveMessage(List<GameModel> games)
    {
        Console.WriteLine(games.Count);
        currentMatch.Games = games;
        StateHasChanged();
        return Task.CompletedTask;
    }
    private string DisplayScore()
    {
        var team1Score = 0;
        var team2Score = 0;

        if (currentMatch.Games?.LastOrDefault() != null)
        {
            team1Score = currentMatch.Games.Last().Team1Score;
            team2Score = currentMatch.Games.Last().Team2Score;
        }
        return $"{team1Score} - {team2Score}";
    }
    private int DisplayTeam1Score()
    {
        return currentMatch.Games.LastOrDefault()?.Team1Score ?? 0;
    }

    private int DisplayTeam2Score()
    {
        return currentMatch.Games.LastOrDefault()?.Team2Score ?? 0;
    }

    private string ShortenString(string input)
    {
        // Check if the input string is longer than 12 characters.
        if (input.Length > 12)
        {
            // If it is, return the first 12 characters followed by an ellipsis (...).
            return input.Substring(0, 12);
        }
        else
        {
            // If the input string is 12 characters or less, return it as-is.
            return input;
        }
    }
}
