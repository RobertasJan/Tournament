@page "/tournament/create"
@using System.Globalization
@using System.Reflection
@using Tournament.Client.Components;
@using Tournament.Domain.Tournaments
@using Tournament.Shared.Games
@using Tournament.Shared.Tournaments
@using MatchType = Tournament.Domain.Games.MatchType

<PageTitle>Tournament</PageTitle>
@if (model != null)
{
    <MudForm @ref="@form" @bind-IsValid="@success">
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Class="pa-2" Elevation="3">
                    <MudText Typo="Typo.subtitle2">@Loc["Label_TournamentInfo"]</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="model.Data.Name" Label="@Loc["Label_TournamentName"]" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="model.Data.Description" Label="@Loc["Label_ShortDescription"]" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="model.Data.Address" Label="@Loc["Label_Address"]" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudDatePicker Label="@Loc["Label_StartDate"]" @bind-Date="model.Data.StartDate" Culture="@GetCultureInfo()" TitleDateFormat="yyyy-MM-dd" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudDatePicker Label="@Loc["Label_EndDate"]" @bind-Date="model.Data.EndDate" Culture="@GetCultureInfo()" TitleDateFormat="yyyy-MM-dd" />
                        </MudItem>
                        @*                <MudItem xs="12" sm="6">
                        <MudTimePicker Label="Average match time" @bind-Time="model.Data.AverageTimePerMatch" TimeEditMode="TimeEditMode.OnlyMinutes" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="model.Data.CourtsAvailable" Label="Courts count" Min="1" Max="100" Step="1" />
                    </MudItem>*@
                        <MudItem xs="12">
                            <MudCheckBox @bind-Checked="@model.Data.Public" Label="@Loc["Label_Public"]" Color="Color.Primary"></MudCheckBox>
                            <MudCheckBox @bind-Checked="@model.Data.Rated" Disabled="!isAdmin" Label="@Loc["Label_Rated"]" Color="Color.Primary"></MudCheckBox>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Lines="8" @bind-Value="model.Data.LongDescription" Label="@Loc["Label_Description"]" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-2" Elevation="3">
                    <MudText Typo="Typo.subtitle2">@Loc["Label_MatchRules"]</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="4">
                            <MudSelect @bind-Value="model.Data.PointsToWin" Label="@Loc["Label_PointsToWin"]" Variant="Variant.Outlined">
                                <MudSelectItem Value="11">11 (deuce 15)</MudSelectItem>
                                <MudSelectItem Value="15">15 (deuce 17)</MudSelectItem>
                                <MudSelectItem Value="21">21 (deuce 30)</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4">
                            <MudSelect @bind-Value="model.Data.GamesToWin" Label="@Loc["Label_GamesToWin"]" Variant="Variant.Outlined">
                                <MudSelectItem Value="1">@Loc["Label_BestOf1"]</MudSelectItem>
                                <MudSelectItem Value="2">@Loc["Label_BestOf3"]</MudSelectItem>
                                <MudSelectItem Value="3">@Loc["Label_BestOf5"]</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
        <MudGrid Class="pt-4">
            <MudItem xs="12">
                <MudPaper Class="pa-2" Elevation="3">
                    <MudText Typo="Typo.subtitle2">@Loc["Label_TournamentGroups"]</MudText>
                    <MudGrid>
                        <MudItem xs=12 sm="6">
                            <MudSelect SelectedValuesChanged="OnMatchSelected" T="MatchType" Label="@Loc["Label_MatchTypes"]" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" Variant="Variant.Outlined" MultiSelection="true">
                                @foreach (MatchType type in Enum.GetValues(typeof(Tournament.Domain.Games.MatchType)))
                                {
                                    <MudSelectItem Value="@type">@Loc[$"Enum_MatchType_{type}"]</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudSelect SelectedValuesChanged="OnGroupSelected" T="TournamentGroupTypes" Label="@Loc["Label_TournamentGroups"]" Variant="Variant.Outlined" MultiSelection="true">
                                @foreach (TournamentGroupTypes type in Enum.GetValues(typeof(TournamentGroupTypes)))
                                {
                                    <MudSelectItem Value="@type">@type</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <TournamentTable Groups="model.Data.Groups"></TournamentTable>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudButton Class="ma-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await Submit())" FullWidth="true">@Loc["Label_CreateTournament"]</MudButton>
        </MudGrid>
    </MudForm>
}
@code {
    [Inject] TournamentService TournamentService { get; set; }
    [Inject] PlayerService PlayerService { get; set; }
    [Inject] UserService UserService { get; set; }

    bool isAdmin = false;
    bool success = false;
    MudForm? form = new MudForm();
    TournamentViewModel model;
    IEnumerable<MatchType> MatchTypes { get; set; } = new HashSet<MatchType>();
    IEnumerable<TournamentGroupTypes> Groups { get; set; } = new HashSet<TournamentGroupTypes>();

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; }

    public CultureInfo GetCultureInfo()
    {
        var culture = new CultureInfo("lt");
        DateTimeFormatInfo formatInfo = culture.DateTimeFormat;
        formatInfo.FirstDayOfWeek = DayOfWeek.Monday;
        int[] dayArray = Enumerable.Range(0, 7).ToArray();
        var abrDays = new List<string>();
        var days = new List<string>();
        var monthNames = new List<string>();
        foreach (var day in dayArray)
        {
            days.Add(Loc[$"Calendar_Day_{day}"]);
            abrDays.Add(Loc[$"Calendar_DayAbr_{day}"]);
        }
        formatInfo.AbbreviatedDayNames = abrDays.ToArray();
        formatInfo.DayNames = days.ToArray();
        int[] monthArray = Enumerable.Range(0, 12).ToArray();
        foreach (var month in monthArray)
        {
            monthNames.Add(Loc[$"Calendar_Month_{month}"]);
        }
        monthNames.Add("");

        formatInfo.AbbreviatedMonthNames =
            formatInfo.MonthNames =
                formatInfo.MonthGenitiveNames = formatInfo.AbbreviatedMonthGenitiveNames = monthNames.ToArray();
        System.Globalization.Calendar cal = new GregorianCalendar();
        FieldInfo fieldInfo = culture.GetType().GetField("calendar", BindingFlags.NonPublic | BindingFlags.Instance);
        if (fieldInfo != null)
            fieldInfo.SetValue(culture, cal);
        FieldInfo info = formatInfo.GetType().GetField("calendar", BindingFlags.NonPublic | BindingFlags.Instance);
        if (info != null)
            info.SetValue(formatInfo, cal);
        return culture;
    }

    protected override async Task OnInitializedAsync()
    {
        var currentPlayer = await PlayerService.GetCurrent();
        if (currentPlayer is null) {
            NavigationManager.NavigateTo($"/login", false);
            return;
        }
        isAdmin = await UserService.IsAdmin();
        model = new TournamentViewModel(TournamentService, new TournamentModel
            {
                PointsToWin = 21,
                GamesToWin = 2,
                StartDate = DateTime.Now,
                EndDate = DateTime.Now,
                Groups = new List<TournamentGroupModel>()
            });
        MatchTypes = new HashSet<MatchType>();
        Groups = new HashSet<TournamentGroupTypes>();
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        var str = "";
        foreach (var selectedValue in selectedValues) 
        {
            str += @Loc["Enum_MatchType_" + selectedValue] + " ";
        }
        return str;
    }

    private void OnMatchSelected(IEnumerable<MatchType> values)
    {
        MatchTypes = values;
        BindGroupsToModel();
    }

    private void OnGroupSelected(IEnumerable<TournamentGroupTypes> values)
    {
        Groups = values;
        BindGroupsToModel();
    }

    private void BindGroupsToModel()
    {
        var groups = new List<TournamentGroupModel>();
        foreach (var group in Groups)
        {
            foreach (var match in MatchTypes)
            {
                groups.Add(new TournamentGroupModel()
                    {
                        MatchType = match,
                        Type = group
                    });
            }
        }
        model.Data.Groups = model.Data.Groups.Where(x => groups.Any(y => y.MatchType == x.MatchType && y.Type == x.Type)).ToList();
        foreach (var group in groups)
        {
            if (!model.Data.Groups.Any(x => x.MatchType == group.MatchType && x.Type == group.Type))
            {
                model.Data.Groups.Add(new TournamentGroupModel()
                    {
                        MatchType = group.MatchType,
                        Type = group.Type
                    });
            }
        }
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            var creator = await PlayerService.GetCurrent();
            var response = await model.Save(creator.Id);
            if (response.Error != null)
            {
                ErrorComponent.ShowError(response.Error?.ErrorMessage);
            }
            else
            {
                NavigationManager.NavigateTo($"/tournament/{response.Data}", false);
            }
        }
    }
}