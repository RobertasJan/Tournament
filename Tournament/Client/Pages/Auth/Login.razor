@page "/login"
@page "/login/{redirectUrl}"
@using System.Text.Json
@using Tournament.Client.Components;
@using Tournament.Shared
@inject HttpClient Http
@inject IJSRuntime jsr
@inject NavigationManager nav

<PageTitle>@Loc["Header_Login"]</PageTitle>
<MudGrid>
    <MudItem xs="0" sm="3"></MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class="pa-2" Elevation="3">
            <MudText Typo="Typo.subtitle2">@Loc["Header_Login"]</MudText>
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="user.Email" Label="@Loc["Label_Email"]" Variant="Variant.Text" InputType="InputType.Email"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="user.Password" Label="@Loc["Label_Password"]" Variant="Variant.Text" InputType="InputType.Password"></MudTextField>
                </MudItem>
              
                <MudItem xs="12">
                    <MudButton Class="mt-4" Variant="Variant.Filled" Disabled="isDisabled" Color="Color.Primary" FullWidth="true" OnClick="@(async () => await DoLogin())">@Loc["Header_Login"]</MudButton>
                </MudItem>
                <p>@message</p>
            </MudGrid>
            <MudLink Href="/register">@Loc["Header_Register"]</MudLink>
        </MudPaper>
    </MudItem>
    <MudItem xs="0" sm="3"></MudItem>
</MudGrid>


@code {
    LoginModel user = new LoginModel();
    string message = string.Empty;
    bool isDisabled = false;

    [Parameter]
    public string redirectUrl { get; set; }

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; }

    [Inject] UserService UserService { get; set; }

    private async Task DoLogin()
    {
        isDisabled = true;

        var response = await UserService.Login(user);
        if (response.Error != null)
        {
            var result = response.Data;
            ErrorComponent.ShowError(response.Error?.ErrorMessage);
            isDisabled = false;
        }
        else
        {
            var result = response.Data;

            if (result.Success)
            {
                await jsr.InvokeVoidAsync("localStorage.setItem", "user", $"{result.Email};{result.JwtBearer};{result.Role}").ConfigureAwait(false);
                await jsr.InvokeVoidAsync("localStorage.setItem", "player", JsonSerializer.Serialize(result.Player)).ConfigureAwait(false);
            }
            if (!string.IsNullOrEmpty(redirectUrl))
            {
                nav.NavigateTo($"/{redirectUrl}", true);
            }
            else
            {
                nav.NavigateTo("/", true);
            }
        }
    }
}
