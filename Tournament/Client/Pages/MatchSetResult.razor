@page "/tournament/{TourneyId:guid}/match/{Id:guid}/result"

@using MudBlazor;
@using Tournament.Client.Services;
@using Tournament.Domain.Games;
@using Tournament.Server.Models;
@using Tournament.Shared.Games;

<PageTitle>@Loc["Label_Match"]</PageTitle>
<MudForm @ref="@form" @bind-IsValid="@success">

    @if (Match is not null)
    {
        if (Match.Result != MatchResult.Undetermined)
        {
            <h4>@Loc["Label_MatchAlreadyPlayed"]</h4>
        }
        else {}
        <MudGrid>
        <MudItem xs="12">
        <MudPaper Class="pa-2" Elevation="3">
            <MudText Typo="Typo.subtitle1">@Loc["Label_Games"]</MudText>
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudItem>@Loc["Label_Team1"] @Match.Team1.Player1Name @Match.Team1.Player2Name</MudItem>
                    @{
                        var i = 0;
                    }
                    @foreach (var game in Games)
                    {
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle2">
                                @(
                                    ++i
                                    ) @Loc["Label_Game"]
                            </MudText>
                        </MudItem>
                        <MudItem><MudNumericField @bind-Value="game.Team1Score" Label="@Loc["Label_Team1Score"]" Min="0" Max="Match.PointsToFinalize" Step="1" /></MudItem>
                    }

                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudItem>@Loc["Label_Team2"] @Match.Team2.Player1Name @Match.Team2.Player2Name</MudItem>
                    @{
                        var j = 0;
                    }
                    @foreach (var game in Games)
                    {
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle2">
                                @(
                                    ++j
                                    ) @Loc["Label_Game"]
                            </MudText>
                        </MudItem>
                        <MudItem><MudNumericField @bind-Value="game.Team2Score" Label="@Loc["Label_Team2Score"]" Min="0" Max="Match.PointsToFinalize" Step="1" /></MudItem>
                    }
                </MudItem>

                @if (Games.Count < MaxGameCount)
                {
                    <MudButton Class="ma-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await AddGame())" FullWidth="true">@Loc["Label_AddGame"]</MudButton>
                }
                @if (Games.Count > Match.GamesToWin)
                {
                    <MudButton Class="ma-4" Variant="Variant.Filled" Color="Color.Warning" OnClick="@(async () => await RemoveGame())" FullWidth="true">@Loc["Label_RemoveGame"]</MudButton>
                }
            </MudGrid>
        </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="pa-2" Elevation="3">
                <MudText Typo="Typo.subtitle2">@Loc["Label_MatchEnding"]</MudText>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="Match.Result" Label="@Loc["Label_Result"]" Variant="Variant.Outlined">
                            <MudSelectItem Value="MatchResult.Team1Victory">@Loc["Label_Team1Victory"]</MudSelectItem>
                            <MudSelectItem Value="MatchResult.Team2Victory">@Loc["Label_Team2Victory"]</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="Match.Record" Label="@Loc["Label_Record"]" Variant="Variant.Outlined">
                            <MudSelectItem Value="MatchRecord.Played">@Loc["Enum_MatchRecord_Played"]</MudSelectItem>
                            <MudSelectItem Value="MatchRecord.Disqualified">@Loc["Enum_MatchRecord_Disqualified"]</MudSelectItem>
                            <MudSelectItem Value="MatchRecord.Walkover">@Loc["Enum_MatchRecord_Walkover"]</MudSelectItem>
                            <MudSelectItem Value="MatchRecord.Injury">@Loc["Enum_MatchRecord_Injury"]</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6"></MudItem>
                    <MudItem xs="12" sm="6"></MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
            <MudButton Class="ma-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await Submit())" FullWidth="true">@Loc["Label_SetScore"]</MudButton>
        </MudGrid>
    }
</MudForm>


@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public Guid? TourneyId { get; set; }

    [Inject] GameService GameService { get; set; }

    bool success = false;
    MudForm? form = new MudForm();
    ICollection<GameModel> Games { get; set; }
    MatchModel Match { get; set; }
    int MaxGameCount { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        Match = await GameService.GetMatchById(Id);
        Match.Result = MatchResult.Team1Victory;
        Match.Record = MatchRecord.Played;
        MaxGameCount = Match.GamesToWin * 2 - 1;
        Games = new List<GameModel>();
        for (var i = 0; i < Match.GamesToWin; i++)
        {
            Games.Add(new GameModel()
            {
               Team1Score = 0,
               Team2Score = 0,
               Result = Domain.Games.GameResult.Undetermined,
               MatchId = Id,
               Team1LeftSide = true,
               Team1Switched = true,
               Team2Switched = true
            });
        }
    }

    private async Task AddGame()
    {
        Games.Add(new GameModel()
        {
            Team1Score = 0,
            Team2Score = 0,
            Result = Domain.Games.GameResult.Undetermined,
            MatchId = Id,
            Team1LeftSide = true,
            Team1Switched = true,
            Team2Switched = true
        });
    }

    private async Task RemoveGame()
    {
        Games.Remove(Games.Last());
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            var currentGames = await GameService.GetMatchGames(Match.Id.Value);
            foreach (var game in currentGames)
            {
                await GameService.DeleteGame(game.Id.Value, Match.Id.Value);
            }
            foreach (var game in Games)
            {
                await GameService.CreateGame(game, Match.Id.Value);
            }
            await GameService.UpdateMatch(Match);
            await GameService.SetNextMatch(Match.Id.Value);
            NavigationManager.NavigateTo($"/tournament/{TourneyId}", false);

        }
    }
}