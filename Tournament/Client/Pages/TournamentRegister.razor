@page "/tournament/{Id:guid}/register"
@using Microsoft.AspNetCore.WebUtilities
@using Tournament.Client.Components.Player
@using Tournament.Client.Components;
@using Tournament.Domain.Games
@using Tournament.Domain.Tournaments
@using Tournament.Shared.Games
@using Tournament.Shared.Players
@using Tournament.Shared.Tournaments

<PageTitle>Register</PageTitle>

@if (model != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-2" Elevation="3">
                <MudText Typo="Typo.h4" GutterBottom="true">@model.Data.Name</MudText>
                <MudText Typo="Typo.caption" GutterBottom="true">@model.Data.Description</MudText>
                <MudText Typo="Typo.caption" GutterBottom="true">@model.Data.Name</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="pa-2" Elevation="3">
                <MudGrid>
                    @if (CanRegisterOthers) 
                    {
                        <MudItem xs="12">
                            <SelectPlayer Player="Player" PlayerChanged="OnPlayerChanged"></SelectPlayer>
                        </MudItem>
                    }
                    @if (Player != null)
                    {
                        <MudItem xs="12" sm="6">
                            <MudSelect @bind-Value="MatchType1" Label="@Loc["Label_MatchType"]" Variant="Variant.Outlined">
                                @foreach (MatchType type in Player.GetGenderMatchTypes(model.Data.GetMatchTypes()))
                                {
                                    <MudSelectItem Value="@type">@Loc[$"Enum_MatchType_{type}"]</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudSelect @bind-Value="Group1" Label="@Loc["Label_Group"]" Variant="Variant.Outlined">
                                @foreach (TournamentGroupTypes type in model.Data.GetGroupTypes())
                                {
                                    <MudSelectItem Value="@type">@type</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12">
                            @if (MatchType1 == MatchType.MixedDoubles)
                            {
                                <AddPartner Player="Partner1" PlayerChanged="OnPartner1Changed" PartnerGender="Player.GetOppositeGender()" PlayerId="Player.Id" TournamentId="model.Data.Id.Value"></AddPartner>
                            }
                            else if (MatchType1 == MatchType.MensDoubles || MatchType1 == MatchType.WomensDoubles)
                            {
                                <AddPartner Player="Partner1" PlayerChanged="OnPartner1Changed" PartnerGender="Player.Gender" PlayerId="Player.Id" TournamentId="model.Data.Id.Value"></AddPartner>

                            }
                        </MudItem>

                        @if (!AddedGroup2)
                        {
                            @if (Player.GetGenderMatchTypes(model.Data.GetMatchTypes()).Where(x => x != MatchType1).Count() > 0)
                            {
                                <MudItem xs="12">
                                    <MudButton OnClick="AddGroup2" Variant="Variant.Filled" Color="Color.Primary">@Loc["Label_AddGroup"]</MudButton>
                                </MudItem>
                            }
                        }
                        else
                        {
                            <MudDivider></MudDivider>
                            <MudItem xs="12" sm="6">
                                <MudSelect @bind-Value="MatchType2" Label="@Loc["Label_MatchType"]" Variant="Variant.Outlined">
                                    @foreach (MatchType type in Player.GetGenderMatchTypes(model.Data.GetMatchTypes()).Where(x => x != MatchType1 && (!AddedGroup3 || x != MatchType3)))
                                    {
                                        <MudSelectItem Value="@type">@Loc[$"Enum_MatchType_{type}"]</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudSelect @bind-Value="Group2" Label="@Loc["Label_Group"]" Variant="Variant.Outlined">
                                    @foreach (TournamentGroupTypes type in model.Data.GetGroupTypes())
                                    {
                                        <MudSelectItem Value="@type">@type</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                @if (MatchType2 == MatchType.MixedDoubles)
                                {
                                    <AddPartner Player="Partner2" PlayerChanged="OnPartner2Changed" PartnerGender="Player.GetOppositeGender()" PlayerId="Player.Id" TournamentId="model.Data.Id.Value"></AddPartner>
                                }
                                else if (MatchType2 == MatchType.MensDoubles || MatchType2 == MatchType.WomensDoubles)
                                {
                                    <AddPartner Player="Partner2" PlayerChanged="OnPartner2Changed" PartnerGender="Player.Gender" PlayerId="Player.Id" TournamentId="model.Data.Id.Value"></AddPartner>
                                }
                            </MudItem>
                            @if (!AddedGroup3)
                            {
                                <MudItem xs="12">
                                    @if (Player.GetGenderMatchTypes(model.Data.GetMatchTypes()).Where(x => x != MatchType1 && x != MatchType2).Count() > 0)
                                    {
                                        <MudButton OnClick="AddGroup3" Variant="Variant.Filled" Color="Color.Primary">@Loc["Label_AddGroup"]</MudButton>
                                    }
                                    <MudButton OnClick="RemoveGroup2" Variant="Variant.Filled" Color="Color.Secondary">@Loc["Label_RemoveGroup"]</MudButton>
                                </MudItem>
                            }
                        }

                        @if (AddedGroup3)
                        {
                            <MudDivider></MudDivider>
                            <MudItem xs="12" sm="6">
                                <MudSelect @bind-Value="MatchType3" Label="@Loc["Label_MatchType"]" Variant="Variant.Outlined">
                                    @foreach (MatchType type in Player.GetGenderMatchTypes(model.Data.GetMatchTypes()).Where(x => x != MatchType1 && x != MatchType2))
                                    {
                                        <MudSelectItem Value="@type">@Loc[$"Enum_MatchType_{type}"]</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudSelect @bind-Value="Group3" Label="@Loc["Label_Group"]" Variant="Variant.Outlined">
                                    @foreach (TournamentGroupTypes type in model.Data.GetGroupTypes())
                                    {
                                        <MudSelectItem Value="@type">@type</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                @if (MatchType3 == MatchType.MixedDoubles)
                                {
                                    <AddPartner Player="Partner3" PlayerChanged="OnPartner3Changed" PartnerGender="Player.GetOppositeGender()" PlayerId="Player.Id" TournamentId="model.Data.Id.Value"></AddPartner>
                                }
                                else if (MatchType3 == MatchType.MensDoubles || MatchType3 == MatchType.WomensDoubles)
                                {
                                    <AddPartner Player="Partner3" PlayerChanged="OnPartner3Changed" PartnerGender="Player.Gender" PlayerId="Player.Id" TournamentId="model.Data.Id.Value"></AddPartner>
                                }
                            </MudItem>
                            <MudItem xs="12">
                                <MudButton OnClick="RemoveGroup3" Variant="Variant.Filled" Color="Color.Secondary">@Loc["Label_RemoveGroup"]</MudButton>
                            </MudItem>
                        }

                        <MudDivider></MudDivider>
                        <MudItem xs="12">
                            <MudButton OnClick="AddMatch" Variant="Variant.Filled" Color="Color.Primary">@Loc["Label_Register"]</MudButton>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>

}
@code {
    [Parameter]
    public Guid Id { get; set; }

    bool CanRegisterOthers { get; set; }

    MatchType MatchType1 { get; set; }
    TournamentGroupTypes Group1 { get; set; } = TournamentGroupTypes.A;
    PlayerModel? Partner1 { get; set; }

    public bool AddedGroup2 { get; set; } = false;
    MatchType MatchType2 { get; set; }
    TournamentGroupTypes Group2 { get; set; } = TournamentGroupTypes.A;
    PlayerModel? Partner2 { get; set; }

    public bool AddedGroup3 { get; set; } = false;
    MatchType MatchType3 { get; set; }
    TournamentGroupTypes Group3 { get; set; } = TournamentGroupTypes.A;
    PlayerModel? Partner3 { get; set; }


    [Inject] TournamentService TournamentService { get; set; }
    [Inject] PlayerService PlayerService { get; set; }
    [Inject] GameService GameService { get; set; }
    [Inject] UserService UserService { get; set; }

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; }

    TournamentViewModel? model = null;
    public PlayerModel? Player { get; set;} = null;

    async Task AddGroup2()
    {
        MatchType2 = Player.GetGenderMatchTypes(model.Data.GetMatchTypes()).First(x => x != MatchType1);
        AddedGroup2 = true;
    }

    async Task RemoveGroup2()
    {
        AddedGroup2 = false;
    }

    async Task AddGroup3()
    {
        MatchType3 = Player.GetGenderMatchTypes(model.Data.GetMatchTypes()).First(x => x != MatchType1 && x != MatchType2);
        AddedGroup3 = true;
    }

    async Task RemoveGroup3()
    {
        AddedGroup3 = false;
    }

    async Task AddMatch()
    {
        var unsuccessfulRegistrations = 0;

        if (!await RegisterPlayers(Partner1, MatchType1, Group1)) unsuccessfulRegistrations++;
        if (AddedGroup2)
        {
            if (!await RegisterPlayers(Partner2, MatchType2, Group2)) unsuccessfulRegistrations++;
        }

        if (AddedGroup3)
        {
            if (!await RegisterPlayers(Partner3, MatchType3, Group3)) unsuccessfulRegistrations++;
        }

        if (unsuccessfulRegistrations == 0)
        {
            NavigationManager.NavigateTo($"/tournament/{model.Data.Id}", false);
        }
    }

    async Task<bool> RegisterPlayers(PlayerModel? partnerModel, MatchType type, TournamentGroupTypes tourneyGroupType)
    {
        var response = await TournamentService.RegisterPlayer(model.Data.Id.Value,
            model.Data.Groups.First(x => x.MatchType == type && x.Type == tourneyGroupType).Id.Value, new RegisteredPlayersModel()
                {
                    Player1Id = Player.Id,
                    Player2Id = partnerModel?.Id
                });
        if (response.Error != null)
        {
            if (response.Error?.ErrorCode == 26)
            {
                ErrorComponent.ShowError(Loc[response.Error?.ErrorMessage].Value.Replace("{names}", $"{Player.FullName} {partnerModel?.FullName ?? ""}"));
            }
            else
            {
                ErrorComponent.ShowError(response.Error?.ErrorMessage);
            }
            return false;
        }
        return true;
    }

    protected override async Task OnInitializedAsync()
    {
        var tournament = await TournamentService.GetTournamentById(Id);
        var currentPlayer = await PlayerService.GetCurrent();
        if (currentPlayer is null) {
            NavigationManager.NavigateTo($"/login", false);
            return;
        }
        CanRegisterOthers = await UserService.IsAdmin() || tournament.TournamentCreatorId == currentPlayer.Id;
   
        model = new TournamentViewModel(TournamentService, tournament);
        Group1 = model.Data.GetGroupTypes().First();
        Group2 = model.Data.GetGroupTypes().First();
        Group3 = model.Data.GetGroupTypes().First();
        if (!CanRegisterOthers)
        {
            ///  Player = currentPlayer;
            OnPlayerChanged(currentPlayer);
        }
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    }

    private Task OnPlayerChanged(PlayerModel player)
    {
        Player = player;
        Partner1 = null;
        Partner2 = null;
        Partner3 = null;
        MatchType1 = Player.GetGenderMatchTypes(model.Data.GetMatchTypes()).First();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnPartner1Changed(PlayerModel player)
    {
        Partner1 = player;
        return Task.CompletedTask;
    }

    private Task OnPartner2Changed(PlayerModel player)
    {
        Partner2 = player;
        return Task.CompletedTask;
    }

    private Task OnPartner3Changed(PlayerModel player)
    {
        Partner3 = player;
        return Task.CompletedTask;
    }

}