@page "/match/{Id:guid}"
@page "/tournament/{TourneyId:guid}/match/{Id:guid}"

@using Microsoft.AspNetCore.SignalR.Client;
@using Tournament.Client.Components.Match
@using Tournament.Domain.Games

<PageTitle>@Loc["Label_Match"]</PageTitle>
<MudText Typo="Typo.h4" GutterBottom="true">@Loc["Label_Match"]</MudText>
<MudOverlay Visible="match is null || match.Request" DarkBackground="false" AutoClose="false"></MudOverlay>
<MudPaper Class="pa-5" Style="background-color: var(--color-court); min-height: 40vh;">
    <MudGrid>
        @if (match is not null)
        {
            <MudItem xs="12">
                <MudText Class="d-flex align-center justify-center mud-width-full py-2 red-text">@DisplayPreviousScores()</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.h5" Class="d-flex align-center justify-center mud-width-full py-2 white-text">@(match.Team1LeftSide ? $"{match.CurrentGame.Team1Score} - {match.CurrentGame.Team2Score}" : $"{match.CurrentGame.Team2Score} - {match.CurrentGame.Team1Score}")</MudText>
            </MudItem>
            <MudItem Class="my-auto" xs="2">
                @if (!match.EndGame)
                {
                    <MudElement Class="d-flex align-center justify-center">
                        <MudButton Class="mud-width-full py-2" Color="Color.Primary" Variant="Variant.Filled" @onclick="match.Team1LeftSide ? match.AddTeam1Score : match.AddTeam2Score"><MudIcon Icon="@Icons.Filled.ExposurePlus1"></MudIcon></MudButton>
                    </MudElement>
                }
            </MudItem>
            <MudItem xs="4">
                @if (match.Team1LeftSide)
                {
                    <MatchPlayerTag ShuttleVisible="match.ServeLocation == CourtLocation.NW" ShuttleAfter="false">@match.Player2</MatchPlayerTag>
                    <MatchPlayerTag ShuttleVisible="match.ServeLocation == CourtLocation.SW" ShuttleAfter="false">@match.Player1</MatchPlayerTag>
                }
                else 
                {
                    <MatchPlayerTag ShuttleVisible="match.ServeLocation == CourtLocation.NW" ShuttleAfter="false">@match.Player4</MatchPlayerTag>
                    <MatchPlayerTag ShuttleVisible="match.ServeLocation == CourtLocation.SW" ShuttleAfter="false">@match.Player3</MatchPlayerTag>
                }
                @if (match.CurrentGame.Team1Score == 0 && match.CurrentGame.Team2Score == 0 && !match.IsSingles)
                {
                    <MudButton Class="py-2" Color="Color.Secondary" Variant="Variant.Filled" @onclick="match.Team1LeftSide ? match.SwitchTeam1Players : match.SwitchTeam2Players">@Loc["MatchButton_Switch"]</MudButton>
                }
            </MudItem>
            <MudItem xs="4">
                @if (match.Team1LeftSide) 
                {
                    <MatchPlayerTag ShuttleVisible="match.ServeLocation == CourtLocation.NE" ShuttleAfter="true">@match.Player3</MatchPlayerTag>
                    <MatchPlayerTag ShuttleVisible="match.ServeLocation == CourtLocation.SE" ShuttleAfter="true">@match.Player4</MatchPlayerTag>
                }
                else
                {
                    <MatchPlayerTag ShuttleVisible="match.ServeLocation == CourtLocation.NE" ShuttleAfter="true">@match.Player1</MatchPlayerTag>
                    <MatchPlayerTag ShuttleVisible="match.ServeLocation == CourtLocation.SE" ShuttleAfter="true">@match.Player2</MatchPlayerTag>

                }
                @if (match.CurrentGame.Team1Score == 0 && match.CurrentGame.Team2Score == 0 && !match.IsSingles)
                {
                    <MudButton Class="py-2" Color="Color.Secondary" Variant="Variant.Filled" @onclick="match.Team1LeftSide ? match.SwitchTeam2Players : match.SwitchTeam1Players">@Loc["MatchButton_Switch"]</MudButton>
                }
            </MudItem>
            <MudItem Class="my-auto" xs="2">
                @if (!match.EndGame)
                {
                    <MudElement Class="d-flex align-center justify-center">
                        <MudButton Class="mud-width-full py-2" Color="Color.Primary" Variant="Variant.Filled" @onclick="match.Team1LeftSide ? match.AddTeam2Score : match.AddTeam1Score"><MudIcon Icon="@Icons.Filled.ExposurePlus1"></MudIcon></MudButton>
                    </MudElement>
                }
            </MudItem>
            <MudItem xs="12">
                <MudElement Class="d-flex align-left justify-center">
                    @if (match.CurrentGame.Team1Score != 0 || match.CurrentGame.Team2Score != 0)
                    {
                        @if (match.EndMatch)
                        {
                            <MudButton Class="py-2" Color="Color.Warning" Variant="Variant.Filled" @onclick="EndMatch">@Loc["MatchButton_EndMatch"]</MudButton>
                        }
                        else if (match.EndGame)
                        {
                            <MudButton Class="py-2" Color="Color.Warning" Variant="Variant.Filled" @onclick="match.DoEndGame">@Loc["MatchButton_EndGame"]</MudButton>
                        }
                        @if (!match.EndMatch)
                        {
                            <MudButton Class="py-2" Color="Color.Warning" Variant="Variant.Filled" @onclick="match.ReturnPoint">@Loc["MatchButton_Return"]</MudButton>
                        }
                    }
                    else if (match.FirstGame)
                    {
                        <MudGrid>
                            <MudItem md="3"></MudItem>
                            <MudItem xs="12" md="3">
                                <MudButton Class="py-2" Color="Color.Secondary" Variant="Variant.Filled" @onclick="match.ChangeServeSide">@Loc["MatchButton_ChangeServer"]</MudButton>
                            </MudItem>
                            <MudItem xs="12" md="3">
                                <MudButton Class="py-2" Color="Color.Secondary" Variant="Variant.Filled" @onclick="match.SwitchTeams">@Loc["MatchButton_ChangeSides"]</MudButton>
                            </MudItem>
                        </MudGrid>
                    }
                </MudElement>
            </MudItem>
        }
    </MudGrid>
</MudPaper>
@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public Guid? TourneyId { get; set; }

    [Inject] GameService GameService { get; set; }
    HubConnection connection;

    private MatchViewModel match;

    protected override async Task OnInitializedAsync()
    {
        connection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/match-score-hub")).Build();
        match = new MatchViewModel(GameService, await GameService.GetMatchById(Id), await GameService.GetMatchGames(Id), connection);
    }

    private string DisplayPreviousScores()
    {
        var displayString = "";
        foreach (var game in match.GameList.SkipLast(1))
        {
            if (match.Team1LeftSide)
            {
                displayString += $"{game.Team1Score} : {game.Team2Score}  ";
            } else {
                displayString += $"{game.Team2Score} : {game.Team1Score}  ";
            }
        }

        return displayString;
    }

    public async Task EndMatch() {
        await match.DoEndMatch();
        if (TourneyId != null)
        {
            NavigationManager.NavigateTo($"/tournament/{TourneyId.Value}", false);
        }
        else
        {
            NavigationManager.NavigateTo($"/", false);
        }

    }
}
